mongo:
  request-rate-too-large:
    api:
      enabled: ${MONGO_REQUEST_RATE_TOO_LARGE_API_ENABLED:false}
      max-retry: ${MONGO_REQUEST_RATE_TOO_LARGE_API_MAX_RETRY:0}
      max-millis-elapsed: ${MONGO_REQUEST_RATE_TOO_LARGE_API_MAX_MILLIS_ELAPSED:200}
    batch:
      enabled: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_ENABLED:true}
      max-retry: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_MAX_RETRY:5}
      max-millis-elapsed: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_MAX_MILLIS_ELAPSED:0}

spring:
  application:
    name: "@project.artifactId@"
    version: "@project.version@"
  jmx.enabled: true
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017}
      database: ${MONGODB_DBNAME:idpay}
      # custom configured properties
      config:
        connectionPool:
          maxSize: ${MONGODB_CONNECTIONPOOL_MAX_SIZE:100}
          minSize: ${MONGODB_CONNECTIONPOOL_MIN_SIZE:0}
          maxWaitTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_WAIT_MS:120000}
          maxConnectionLifeTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_LIFE_MS:0}
          maxConnectionIdleTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_IDLE_MS:120000}
          maxConnecting: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTING:2}
  servlet:
    multipart:
      max-file-size: ${GROUP_FILE_MAX_FILE_SIZE:2097152}
  cloud:
    function:
      definition: consumerCommands
    stream:
      binders:
        kafka-notification:
          type: kafka
          environment:
            spring.cloud.stream:
              kafka:
                binder:
                  brokers: ${KAFKA_NOTIFICATION_ALLOWED_CITIZEN_ENDPOINT_BROKER:${KAFKA_BROKER:}}
                  configuration:
                    sasl:
                      jaas.config: ${KAFKA_NOTIFICATION_PRODUCER_SASL_JAAS_CONFIG:}
        kafka-onboarding-notification:
          type: kafka
          environment:
            spring.cloud.stream:
              kafka:
                binder:
                  brokers: ${KAFKA_ONBOARDING_NOTIFICATION_ALLOWED_CITIZEN_ENDPOINT_BROKER:${KAFKA_BROKER:}}
                  configuration:
                    sasl:
                      jaas.config: ${KAFKA_ONBOARDING_NOTIFICATION_PRODUCER_SASL_JAAS_CONFIG:}
        kafka-commands:
          type: kafka
          environment:
            spring.cloud.stream:
              kafka:
                binder:
                  brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST_01:}
                  configuration:
                    sasl:
                      jaas.config: ${KAFKA_COMMANDS_IN_SASL_JAAS_CONFIG:}
      bindings:
        allowedCitizen-out-0:
          binder: kafka-notification
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_NOTIFICATION:idpay-notification-request}
        allowedCitizen-out-1:
          binder: kafka-onboarding-notification
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_ONBOARDING_NOTIFICATION:idpay-onboarding-notification}
        consumerCommands-in-0:
          binder: kafka-commands
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_COMMANDS:idpay-commands}
          group: ${KAFKA_COMMANDS_GROUP_IN:idpay-commands-group-consumer-group}
      kafka:
        binder:
          auto-create-topics: false
          configuration:
            heartbeat.interval.ms: ${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:3000}
            session.timeout.ms: ${KAFKA_CONFIG_SESSION_TIMEOUT_MS:60000}
            request.timeout.ms: ${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
            sasl.mechanism: ${KAFKA_CONFIG_SASL_MECHANISM:PLAIN}
            security.protocol: ${KAFKA_CONFIG_SECURITY_PROTOCOL:SASL_SSL}
            connections.max.idle.ms: ${KAFKA_GROUP_CONFIG_CONNECTION_MAX_IDLE_TIME:180000}
            metadata.max.age.ms: ${KAFKA_GROUP_CONFIG_METADATA_MAX_AGE_INTERVAL:180000}
            max.request.size: ${KAFKA_GROUP_CONFIG_METADATA_MAX_REQUEST_SIZE:1000000}
        bindings:
          allowedCitizen-out-0:
            producer:
              configuration:
                client.id: allowedCitizen0-producer
                retry.backoff.ms: ${KAFKA_GROUP_PRODUCER_CONFIG_RETRY_BO_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_GROUP_PRODUCER_CONFIG_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_GROUP_PRODUCER_CONFIG_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}
                metadata.max.idle.ms: ${KAFKA_GROUP_PRODUCER_DEFAULT_METADATA_MAX_IDLE_MS:180000}
          allowedCitizen-out-1:
            producer:
              configuration:
                client.id: allowedCitizen1-producer
                retry.backoff.ms: ${KAFKA_GROUP_PRODUCER_CONFIG_RETRY_BO_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_GROUP_PRODUCER_CONFIG_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_GROUP_PRODUCER_CONFIG_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}
                metadata.max.idle.ms: ${KAFKA_GROUP_PRODUCER_DEFAULT_METADATA_MAX_IDLE_MS:180000}
          consumerCommands-in-0:
            consumer:
              autoCommitOffset: ${KAFKA_COMMANDS_AUTO_COMMIT:${KAFKA_CONSUMER_CONFIG_AUTO_COMMIT:true}}
              configuration:
                connections.max.idle.ms: ${KAFKA_COMMANDS_REQUEST_CONNECTIONS_MAX_IDLE_MS:${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}}
                max.poll:
                  interval.ms: ${KAFKA_COMMANDS_INTERVAL_TIMEOUT_MS:${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}}
                  records: ${KAFKA_COMMANDS_MAX_POLL_SIZE:${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}}
                socket.connection.setup.timeout:
                  max.ms: ${KAFKA_COMMANDS_REQUEST_CONNECTION_TIMEOUT_MAX_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}}
                  ms: ${KAFKA_COMMANDS_REQUEST_CONNECTION_TIMEOUT_MS:${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}}
              standardHeaders: ${KAFKA_COMMANDS_STANDARD_HEADERS:${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}}
              startOffset: ${KAFKA_COMMANDS_REQUEST_START_OFFSET:${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}}
    openfeign:
      okhttp:
        enabled: true
      client:
        config:
          pdv-ms-tokenizer:
            errorDecoder: it.gov.pagopa.group.connector.pdv.PdvClientErrorDecoder
            loggerLevel: basic
            retryer: it.gov.pagopa.group.connector.pdv.PdvClientRetryer

management:
  endpoints:
    web:
      exposure:
        include: "*"

rest-client:
  initiative:
    base-url: ${INITIATIVE_MS_BASE_URL:}
  pdv-encrypt:
    http:
      retry:
        period: 100
        maxPeriod: 1
        maxAttempts: 3
    cf: ${PDV_ENCRYPT_SERVICE_CODE:pdv-ms-tokenizer}
    base-url: ${PDV_ENCRYPT_BASE_URL:}
    api.key: ${PDV_ENCRYPT_API_KEY:}

file:
  schedule:
    init-delay:
    fixed-rate:
    valid: #TODO not yet in use
      enabled: ${GROUP_SCHEDULE_VALIDATED_FILE_ENABLED:true}
      init-delay:
      fixed-rate:
      cron: ${GROUP_SCHEDULE_VALIDATED_FILE_CRON:5 0 0 0 * *} #Every 5 seconds
    proc-ko: #TODO not yet in use
      enabled: ${GROUP_SCHEDULE_PROC-KO_FILE_ENABLED:true}
      init-delay:
      fixed-rate:
      cron: ${GROUP_SCHEDULE_PROC-KO_FILE_CRON:10 0 0 0 * *} #Every 10 seconds
  storage:
    path: ${GROUP_FILE_ROOT_PATH:/tmp/pagopa/group}
    column_separator: ${CF_FILE_SEPARATOR_COLUMN:;}
    deletion: ${GROUP_FILE_DELETION:false}

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    it.gov.pagopa: ${LOG_LEVEL_PAGOPA:INFO}
    it.gov.pagopa.group: ${LOG_LEVEL_GROUP:INFO}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
    org.springframework.data: ${LOG_LEVEL_SPRING_DATA:INFO}
    org.springframework.boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
    io.swagger: ${LOG_LEVEL_IO_SWAGGER:WARN}
    javax.persistence: ${LOG_LEVEL_JAVAX_PERSISTENCE:INFO}
    org.hibernate: ${LOG_LEVEL_ORG_HIBERNATE:INFO}
    org.mongodb.driver: ${LOG_LEVEL_MONGODB_DRIVER:WARN}
app:
  delete:
    paginationSize: ${DELETE_PAGINATION_SIZE:100}
    delayTime: ${DELETE_DELAY_TIME:1000}

#utils:
#  task:
#    execution:
#      parallelPool: ${UTILS_TASK_EXECUTION_PARALLEL_POOL:2}