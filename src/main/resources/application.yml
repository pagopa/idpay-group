spring:
  data:
    mongodb:
      uri: ${MONGODB_URI}
      database: ${MONGODB_DBNAME}
  servlet:
    multipart:
      max-file-size: ${GROUP_FILE_MAX_FILE_SIZE:2097152}
  cloud:
    stream:
      binders:
        kafka-notification:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_NOTIFICATION_ALLOWED_CITIZEN_ENDPOINT_BROKER:${KAFKA_BROKER:}}
                      configuration:
                        sasl:
                          jaas:
                            config: ${KAFKA_NOTIFICATION_PRODUCER_SASL_JAAS_CONFIG:}
      bindings:
        allowedCitizen-out-0:
          binder: kafka-notification
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          destination: ${KAFKA_TOPIC_NOTIFICATION:idpay-notification-request}
      kafka:
        binder:
          auto-create-topics: false
          configuration:
            heartbeat.interval.ms: ${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:30000}
            session.timeout.ms: ${KAFKA_CONFIG_SESSION_TIMEOUT_MS:60000}
            request.timeout.ms: ${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
            sasl.mechanism: ${KAFKA_CONFIG_SASL_MECHANISM:PLAIN}
            security.protocol: ${KAFKA_CONFIG_SECURITY_PROTOCOL:SASL_SSL}

management:
  endpoints:
    web:
      exposure:
        include: "*"

rest-client:
  initiative:
    base-url: ${INITIATIVE_MS_BASE_URL:}
  pdv-encrypt:
    http:
      retry:
        period: 100
        maxPeriod: 1
        maxAttempts: 3
    cf: ${PDV_ENCRYPT_SERVICE_CODE:pdv-ms-tokenizer}
    base-url: ${PDV_ENCRYPT_BASE_URL:}
    api.key: ${PDV_ENCRYPT_API_KEY:}
feign:
  okhttp:
    enabled: true
  client:
    config:
      pdv-ms-tokenizer:
        errorDecoder: it.gov.pagopa.group.connector.pdv.PdvClientErrorDecoder
        loggerLevel: basic
        retryer: it.gov.pagopa.group.connector.pdv.PdvClientRetryer

file:
  schedule:
    init-delay:
    fixed-rate:
    valid: #TODO not yet in use
      enabled: ${GROUP_SCHEDULE_VALIDATED_FILE_ENABLED:true}
      init-delay:
      fixed-rate:
      cron: ${GROUP_SCHEDULE_VALIDATED_FILE_CRON:5 0 0 0 * *} #Every 5 seconds
    proc-ko: #TODO not yet in use
      enabled: ${GROUP_SCHEDULE_PROC-KO_FILE_ENABLED:true}
      init-delay:
      fixed-rate:
      cron: ${GROUP_SCHEDULE_PROC-KO_FILE_CRON:10 0 0 0 * *} #Every 10 seconds
  storage:
    path: ${GROUP_FILE_ROOT_PATH:/tmp/pagopa/group}
    column_separator: ${CF_FILE_SEPARATOR_COLUMN:;}
    deletion: ${GROUP_FILE_DELETION:false}

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    it.gov.pagopa: ${LOG_LEVEL_PAGOPA:INFO}
    it.gov.pagopa.group: ${LOG_LEVEL_GROUP:INFO}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
    org.springframework.data: ${LOG_LEVEL_SPRING_DATA:INFO}
    org.springframework.boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
    io.swagger: ${LOG_LEVEL_IO_SWAGGER:WARN}
    javax.persistence: ${LOG_LEVEL_JAVAX_PERSISTENCE:INFO}
    org.hibernate: ${LOG_LEVEL_ORG_HIBERNATE:INFO}
    org.mongodb.driver: ${LOG_LEVEL_MONGODB_DRIVER:WARN}

utils:
  task:
    execution:
      parallelPool: ${UTILS_TASK_EXECUTION_PARALLEL_POOL:8}