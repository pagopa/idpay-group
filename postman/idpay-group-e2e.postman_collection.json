{
	"info": {
		"_postman_id": "37793a9c-29fa-4cfa-b8e7-606c4c34f924",
		"name": "idpay-group-e2e",
		"description": "IDPAY Welfare Portal Initiative",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3194665"
	},
	"item": [
		{
			"name": "Portal Token Acquisition",
			"item": [
				{
					"name": "Generate Portal Token Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let textResponse = pm.response.text()\r",
									"\r",
									"pm.test('Retrieve Token', () => {\r",
									"    //verify response HTTP status \r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
									"});\r",
									"\r",
									"//response time is less than 1s\r",
									"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Ocp-Apim-Trace",
								"value": "true",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aud\" : \"idpay.welfare.pagopa.it\",\r\n    \"uid\" : \"9abcbe25-99f4-40f9-a03b-afed9cd9bb8a\",\r\n    \"name\" : \"Mario\",\r\n    \"familyName\" : \"Rossi\",\r\n    \"email\" : \"test@token.it\",\r\n    \"orgId\" : \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",    \r\n    \"orgVAT\" : \"11122233344\",\r\n    \"orgPartyRole\" : \"ADMIN\",\r\n    \"orgRole\" : \"API\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlToken}}/welfare/token/test",
							"host": [
								"{{baseUrlToken}}"
							],
							"path": [
								"welfare",
								"token",
								"test"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Initiative with Group file",
			"item": [
				{
					"name": "STEP1-Insert Initiative (Service Info)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
									"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
									"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"\r",
									"pm.collectionVariables.set('channel_type', 'web');\r",
									"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"// console.log('jsondata', jsonData);\r",
									"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
									"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
									"\r",
									"pm.test(\"Status test 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlInitiative}}/info",
							"host": [
								"{{baseUrlInitiative}}"
							],
							"path": [
								"info"
							]
						},
						"description": "Save initiative and first subset of data 'general info'"
					},
					"response": []
				},
				{
					"name": "STEP2-Update Initiative (general Info)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let moment = require('moment');\r",
									"//Format: YYYY-MM-DD\r",
									"let today = String(moment().format('YYYY-MM-DD'));\r",
									"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
									"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
									"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
									"\r",
									"/*\r",
									"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
									"pm.collectionVariables.set('...', _.random(0, 180));\r",
									"*/\r",
									"//_.floor(_.random(1.0, 100000.0, true),2)\r",
									"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
									"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
									"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
									"pm.collectionVariables.set('beneficiaryKnown', false);\r",
									"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
									"pm.collectionVariables.set('rankingStartDate', today);\r",
									"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
									"pm.collectionVariables.set('startDate', todayP2);\r",
									"pm.collectionVariables.set('endDate', todayP3);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlInitiative}}/:initiativeId/general",
							"host": [
								"{{baseUrlInitiative}}"
							],
							"path": [
								":initiativeId",
								"general"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								}
							]
						},
						"description": "Save initiative and first subset of data 'general info'"
					},
					"response": []
				},
				{
					"name": "Get Status on Groups for DRAFT Initiative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body - Group not found because of problems on validation\", function () {\r",
									"    let jsonResponse = pm.response.json()\r",
									"    pm.expect(jsonResponse.code).equals('it.gov.pagopa.group.not.found');\r",
									"    pm.expect(jsonResponse.message).contain('There is no group for initiativeId');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/status",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"status"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Citizen Status when no Groups are persisted for DRAFT Initiative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body - Group not found because never persisted for initiativeId\", function () {\r",
									"    let jsonResponse = pm.response.json()\r",
									"    pm.expect(jsonResponse.code).equals('it.gov.pagopa.group.not.found');\r",
									"    pm.expect(jsonResponse.message).contain('There is no group for initiativeId');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/citizen/:citizenToken",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"citizen",
								":citizenToken"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								},
								{
									"key": "citizenToken",
									"value": "b0e78244-9bdf-47ab-8843-8546787c0734"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STEP3 Update Groups - upload WrongCF file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).have.property(\"status\");\r",
									"    pm.expect(jsonResponse.status).contain('KO');\r",
									"    pm.expect(jsonResponse).have.property(\"errorRow\");\r",
									"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
									"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.cf');\r",
									"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "ps_fiscal_code_groups_file_large_WrongCF.csv"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/upload",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"upload"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2nd Get Status on Groups for DRAFT Initiative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body - Group not found because of problems on validation\", function () {\r",
									"    let jsonResponse = pm.response.json()\r",
									"    pm.expect(jsonResponse.code).equals('it.gov.pagopa.group.not.found');\r",
									"    pm.expect(jsonResponse.message).contain('There is no group for initiativeId');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/status",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"status"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STEP3 Update Groups - upload Wrong file format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).have.property(\"status\");\r",
									"    pm.expect(jsonResponse.status).contain('KO');\r",
									"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
									"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.format');\r",
									"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "invalid_format.xlsx"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/upload",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"upload"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3rd Get Status on Groups for DRAFT Initiative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body - Group not found because of problems on validation\", function () {\r",
									"    let jsonResponse = pm.response.json()\r",
									"    pm.expect(jsonResponse.code).equals('it.gov.pagopa.group.not.found');\r",
									"    pm.expect(jsonResponse.message).contain('There is no group for initiativeId');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/status",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"status"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STEP3 Update Groups - upload Wrong file (empty first line)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).have.property(\"status\");\r",
									"    pm.expect(jsonResponse.status).contain('KO');\r",
									"    pm.expect(jsonResponse).have.property(\"errorRow\");\r",
									"    pm.expect(jsonResponse.errorRow).equals(1);\r",
									"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
									"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.cf');\r",
									"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "empty_file.csv"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/upload",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"upload"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4th Get Status on Groups for DRAFT Initiative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body - Group not found because of problems on validation\", function () {\r",
									"    let jsonResponse = pm.response.json()\r",
									"    pm.expect(jsonResponse.code).equals('it.gov.pagopa.group.not.found');\r",
									"    pm.expect(jsonResponse.message).contain('There is no group for initiativeId');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/status",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"status"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STEP3 Update Groups - upload NO file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).have.property(\"status\");\r",
									"    pm.expect(jsonResponse.status).contain('KO');\r",
									"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
									"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.empty');\r",
									"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/upload",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"upload"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5th Get Status on Groups for DRAFT Initiative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body - Group not found because of problems on validation\", function () {\r",
									"    let jsonResponse = pm.response.json()\r",
									"    pm.expect(jsonResponse.code).equals('it.gov.pagopa.group.not.found');\r",
									"    pm.expect(jsonResponse.message).contain('There is no group for initiativeId');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/status",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"status"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STEP3 Update Groups - upload Wrong file size",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).have.property(\"status\");\r",
									"    pm.expect(jsonResponse.status).contain('KO');\r",
									"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
									"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.size');\r",
									"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Ocp-Apim-Trace",
								"value": "true",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Ocp-Apim-Subscription-Key",
								"value": "a77ce741c13d43359e49a491d6990540",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "ps_fiscal_code_groups_file_large_OVER_SIZE.csv"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/upload",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"upload"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6th Get Status on Groups for DRAFT Initiative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body - Group not found because of problems on validation\", function () {\r",
									"    let jsonResponse = pm.response.json()\r",
									"    pm.expect(jsonResponse.code).equals('it.gov.pagopa.group.not.found');\r",
									"    pm.expect(jsonResponse.message).contain('There is no group for initiativeId');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/status",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"status"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "STEP3 Update Groups - upload correct file",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).have.property(\"status\");\r",
									"    pm.expect(jsonResponse.status).contain('VALIDATED');\r",
									"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "ps_fiscal_code_groups_file_large_20_lowercase.csv"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/upload",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"upload"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7th Get Status on Groups for DRAFT Initiative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 10000); //milliseconds"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body status in 'OK' in case PDV has Tokenized CF correctly\", function () {\r",
									"    let jsonResponse = pm.response.json()\r",
									"    pm.expect(jsonResponse).have.property(\"status\");\r",
									"    pm.expect(jsonResponse.status).equals('OK');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/status",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"status"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Citizen Status on Groups for DRAFT Initiative Not Present",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body (in case PDV has Tokenized CF correctly previously) - Citizen not found because not present in the Group\", function () {\r",
									"    let jsonResponse = pm.response.json()\r",
									"    pm.expect(jsonResponse.status).equals(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/citizen/:citizenToken",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"citizen",
								":citizenToken"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								},
								{
									"key": "citizenToken",
									"value": "a0a00000-0aaa-00aa-0000-0000000a0000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Citizen Status on Groups for DRAFT Initiative Present",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body (in case PDV has Tokenized CF correctly previously) - Citizen found because is present in the beneficiaryList of Group\", function () {\r",
									"    let jsonResponse = pm.response.json()\r",
									"    pm.expect(jsonResponse.status).equals(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlGroup}}/:initiativeId/citizen/:citizenToken",
							"host": [
								"{{baseUrlGroup}}"
							],
							"path": [
								":initiativeId",
								"citizen",
								":citizenToken"
							],
							"variable": [
								{
									"key": "initiativeId",
									"value": "{{initiativeId}}",
									"description": "(Required) The initiative ID"
								},
								{
									"key": "citizenToken",
									"value": "b0e78244-9bdf-47ab-8843-8546787c0734"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{identityPortalToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://api.dev.cstar.pagopa.it/idpay/initiative",
			"type": "string",
			"disabled": true
		},
		{
			"key": "baseUrl",
			"value": "https://api-io.dev.cstar.pagopa.it/idpay/initiative",
			"type": "string",
			"disabled": true
		},
		{
			"key": "baseUrlInternal",
			"value": "https://api-io.dev.cstar.pagopa.it/idpay/initiative",
			"type": "string",
			"disabled": true
		},
		{
			"key": "baseUrl",
			"value": "localhost:8080/idpay/organization/{{orgId}}/initiative",
			"type": "string",
			"disabled": true
		},
		{
			"key": "baseUrlInternal",
			"value": "localhost:8080/idpay/initiative",
			"type": "string",
			"disabled": true
		},
		{
			"key": "orgId",
			"value": "2f63a151-da4e-4e1e-acf9-adecc0c4d727",
			"type": "string"
		},
		{
			"key": "identityPortalToken",
			"value": ""
		},
		{
			"key": "budget",
			"value": ""
		},
		{
			"key": "beneficiaryType",
			"value": ""
		},
		{
			"key": "beneficiaryKnown",
			"value": ""
		},
		{
			"key": "beneficiaryBudget",
			"value": ""
		},
		{
			"key": "rankingStartDate",
			"value": ""
		},
		{
			"key": "rankingEndDate",
			"value": ""
		},
		{
			"key": "startDate",
			"value": ""
		},
		{
			"key": "endDate",
			"value": ""
		},
		{
			"key": "serviceId",
			"value": ""
		},
		{
			"key": "serviceName",
			"value": ""
		},
		{
			"key": "argument",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "channel_type",
			"value": ""
		},
		{
			"key": "channel_contact",
			"value": ""
		},
		{
			"key": "initiativeId",
			"value": ""
		}
	]
}